#!/usr/bin/env python2

import sys
import os.path
import urllib2
import json
import tarfile
import shutil

# https://wiki.archlinux.org/index.php/Official_repositories_web_interface

url_pkg = "https://www.archlinux.org/packages"

url_aur = "https://aur.archlinux.org"
url_rpc = url_aur + "/rpc.php"

def search_official(args):
    query = args[0]
    url = url_pkg + "/search/json/?arch=x86_64&q=" + query
    src = urllib2.urlopen(url)
    root = json.load(src)
    for result in root["results"]:
        print(result["repo"] + "/" + result["pkgname"] + " " + result["pkgver"] + "_" + result["pkgrel"])
        print("    " + result["pkgdesc"])

def search_aur(args):
    query = args[0]
    url = url_rpc + "?type=search&arg=" + query
    src = urllib2.urlopen(url)
    root = json.load(src)
    for result in root["results"]:
        print(result["Name"] + " " + result["Version"] + " (" + str(result["NumVotes"]) + ")")
        print("    " + result["Description"])

def search(args):
    search_official(args)
    search_aur(args)

def info_official(args):
    pkgpath = args[0]
    repo, pkgname = pkgpath.split("/")
    url = url_pkg + "/" + repo + "/x86_64/" + pkgname + "/json/"
    src = urllib2.urlopen(url)
    root = json.load(src)
    result = root
    for k, v in result.items():
        if isinstance(v, list):
            print(k + ": " + " ".join(map(str, set(v))))
        else:
            print(k + ": " + str(v))

def info_aur(args):
    pkgname = args[0]
    url = url_rpc + "?type=info&arg=" + pkgname
    src = urllib2.urlopen(url)
    root = json.load(src)
    result = root["results"]
    for k, v in result.items():
        if isinstance(v, list):
            print(k + ": " + " ".join(map(str, set(v))))
        else:
            print(k + ": " + str(v))

def info(args):
    if "/" in args[0]:
        info_official(args)
    else:
        info_aur(args)

def get_official(args):
    pkgpath = args[0]
    repo, pkgbase = pkgpath.split("/")
    if repo in ["core", "extra"]:
        url = "https://projects.archlinux.org/svntogit/packages.git/snapshot/packages/" + pkgbase + ".tar.gz"
    else:
        url = "https://projects.archlinux.org/svntogit/community.git/snapshot/community-packages/" + pkgbase + ".tar.gz"
    outpath = os.path.basename(url)
    infile = urllib2.urlopen(url)
    with open(outpath, "wb") as outfile:
        outfile.write(infile.read())
    with tarfile.open(outpath) as tar_snapshot:
        tar_snapshot.extractall()
    os.remove(outpath)

def get_aur(args):
    pkgname = args[0]
    url = url_rpc + "?type=info&arg=" + pkgname
    src = urllib2.urlopen(url)
    root = json.load(src)
    result = root["results"]
    url_snapshot = url_aur + result["URLPath"]
    src_snapshot = urllib2.urlopen(url_snapshot)
    basename_snapshot = os.path.basename(url_snapshot)
    with open(basename_snapshot, "wb") as file_snapshot:
        file_snapshot.write(src_snapshot.read())
    tar_snapshot = tarfile.open(basename_snapshot)
    tar_snapshot.extractall()
    os.remove(basename_snapshot)

def get(args):
    if "/" in args[0]:
        get_official(args)
    else:
        get_aur(args)

def help(args):
    print("usage: " + sys.argv[0] + " search/info/get/help")

if len(sys.argv) < 2:
    help([])
    exit(1)

subcommand = sys.argv[1].strip()
subargs = sys.argv[2:]

if subcommand == "search":
    search(subargs)
elif subcommand == "info":
    info(subargs)
elif subcommand == "get":
    get(subargs)
elif subcommand == "help":
    help(subargs)
else:
    help([])
    exit(1)
